package com.chary.main.repository;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.chary.main.annotaions.AutoGenerated;
import com.chary.main.annotaions.ChangeName;
import com.chary.main.model.Student;
import com.opencsv.CSVWriter;

//import com.mysql.cj.xdevapi.Result;

public class StudentRepo {

	public Connection establishConnection() throws SQLException {
		Connection conn = DriverManager
				.getConnection("jdbc:mysql://localhost:3306/testdb?user=root&password=Kanerika@1385");

		return conn;
	}

	public int save(Student student) throws IllegalArgumentException, IllegalAccessException, SQLException {

		Connection conn = establishConnection();

		Class<?> test = student.getClass();
		Field[] field = test.getDeclaredFields();

		StringBuilder query = new StringBuilder();

		query.append("INSERT INTO students3(");

		List<String> colNames = new ArrayList<>();
		List<String> colValues = new ArrayList<>();

		// System.out.println(
		// student.getId() + " " + student.getMarks() + " " + student.getName() + " " +
		// student.getRollNo());

		// add collNames as Annotations if present
		for (Field f : field) {
			if (f.isAnnotationPresent(ChangeName.class) && (!f.isAnnotationPresent(AutoGenerated.class))) {
				colNames.add(f.getAnnotation(ChangeName.class).value());
			} else if (!f.isAnnotationPresent(AutoGenerated.class)) {
				colNames.add(f.getName());
			}
		}

		query.append(String.join(",", colNames) + ") VALUES(");
		// ///////////////////////////////////////////System.out.println(query);

		// add colValues according to
		for (Field f : field) {
			f.setAccessible(true);

			if (f.getType() == int.class && !f.isAnnotationPresent(AutoGenerated.class)) {
				colValues.add(f.getInt(student) + "");
			} else if (!f.isAnnotationPresent(AutoGenerated.class)) {
				colValues.add("'" + f.get(student).toString() + "'");
			}

		}
		query.append(String.join(",", colValues));
		query.append(")");
		// System.out.println(query);
		PreparedStatement stmt = conn.prepareStatement(query.toString());
		stmt.execute();

		// printing ids
		StringBuilder queryUpdate = new StringBuilder();
		queryUpdate.append("select Id from students3 where ");
		List<String> queryStmt = new ArrayList<>();
		int id = 0;

		for (Field f : field) {
			String l = "";
			f.setAccessible(true);
			if (!f.isAnnotationPresent(AutoGenerated.class)) {
				if (f.isAnnotationPresent(ChangeName.class)) {
					l = f.getAnnotation(ChangeName.class).value().toString();
				} else {
					l = f.getName();
				}
				if (f.getType() == int.class) {
					queryStmt.add(l + " = " + f.getInt(student));
				} else {
					queryStmt.add(l + " = " + "'" + f.get(student) + "'");
				}
			}
		}
		queryUpdate.append(String.join(" AND ", queryStmt));
		// query1.setLength(0);
		// query1.append("select Id from students3 where name = 'chary' AND rollNo = 2
		// AND marks = 'fiftyFive' AND classNo = 10");
		System.out.println(queryUpdate);
		PreparedStatement stmt1 = conn.prepareStatement(queryUpdate.toString());
		ResultSet resultSet = stmt1.executeQuery();
		while (resultSet.next()) {
			id = resultSet.getInt("Id");
		}

		stmt.close();
		query.setLength(0);

		conn.close();
		return id;
	}

	public Student get(int id) throws SQLException, IllegalArgumentException, IllegalAccessException {

		Connection conn = establishConnection();

		String query = "Select * FROM students3 where Id=" + id;
		PreparedStatement stmt = conn.prepareStatement(query);
		System.out.println(query);
		ResultSet resultset = stmt.executeQuery();

		Student student = null;

		String k = "";
		if (resultset.next()) {
			student = new Student();
			Class<?> clapp = student.getClass();
			Field[] fields = clapp.getDeclaredFields();
			for (Field f : fields) {
				f.setAccessible(true);

				// System.out.println(resultset.getObject(f.getName()));
				if (f.isAnnotationPresent(ChangeName.class)) {
					k = f.getAnnotation(ChangeName.class).value();
				} else {
					k = f.getName();
				}
				f.set(student, resultset.getObject(k));
				System.out.println(f.get(student));
			}
		}
		resultset.close();
		return student;
	}

	public int update(Student student) throws SQLException, IllegalArgumentException, IllegalAccessException {
		// if Id is given
		Connection conn = establishConnection();

		Class<?> test = student.getClass();
		Field[] field = test.getDeclaredFields();
		List<String> queryStmt = new ArrayList<>();

		StringBuilder queryUpdate = new StringBuilder();
		queryUpdate.append("UPDATE students3 SET ");

		for (Field f : field) {
			String l = "";
			f.setAccessible(true);
			if (!f.isAnnotationPresent(AutoGenerated.class)) {
				if (f.isAnnotationPresent(ChangeName.class)) {
					l = f.getAnnotation(ChangeName.class).value().toString();
				} else {
					l = f.getName();
				}
				if (f.getType() == int.class) {
					queryStmt.add(l + " = " + f.getInt(student));
				} else {
					queryStmt.add(l + " = " + "'" + f.get(student) + "'");
				}
			}
		}

		queryUpdate.append(String.join(",", queryStmt));
		queryUpdate.append(" WHERE Id=" + student.getId());
		// System.out.println(queryUpdate.toString());
		PreparedStatement stmt = conn.prepareStatement(queryUpdate.toString());
		stmt.executeUpdate();

		conn.close();
		return student.getId();

	}

	public List<Student> getJsonFromDb() throws SQLException, IllegalArgumentException, IllegalAccessException {
		Connection conn = establishConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT * FROM students3");
		ResultSet rs = stmt.executeQuery();
		List<Student> dbStudents = new ArrayList<Student>();
		try {
			while (rs.next()) {
				Student student = new Student();
				Class<?> clapp = student.getClass();
				String k = "";
				for (Field field : clapp.getDeclaredFields()) {
					field.setAccessible(true);
					if (field.isAnnotationPresent(ChangeName.class)) {
						k = field.getAnnotation(ChangeName.class).value();
					} else {
						k = field.getName();
					}

					if (field.getType() == int.class) {
						field.setInt(student, rs.getInt(k));
					} else {
						field.set(student, rs.getString(k));
					}
				}
				dbStudents.add(student);
			}
		} finally {
			conn.close();
			stmt.close();
		}
		return dbStudents;
	}

	public List<Student> getJsonFromDbByName(String name)
			throws SQLException, IllegalArgumentException, IllegalAccessException {
		Connection conn = establishConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT * FROM students3 where nickName=?");
		stmt.setString(1, name);
		ResultSet rs = stmt.executeQuery();
		List<Student> dbStudents = new ArrayList<Student>();
		try {
			while (rs.next()) {
				Student student = new Student();
				Class<?> clapp = student.getClass();
				String k = "";
				for (Field field : clapp.getDeclaredFields()) {
					field.setAccessible(true);
					if (field.isAnnotationPresent(ChangeName.class)) {
						k = field.getAnnotation(ChangeName.class).value();
					} else {
						k = field.getName();
					}

					if (field.getType() == int.class) {
						field.setInt(student, rs.getInt(k));
					} else {
						field.set(student, rs.getString(k));
					}
				}
				dbStudents.add(student);
			}
		} finally {
			conn.close();
			stmt.close();
		}
		return dbStudents;
	}

	public List<Integer> saveJson(String jsonData) throws SQLException {
		Connection conn = establishConnection();
		String query = "INSERT INTO students4(StudentData) VALUES(?)";
		PreparedStatement stmt;
		stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
		stmt.setString(1, jsonData);
		stmt.execute();

		ResultSet resultSet = stmt.getGeneratedKeys();

		List<Integer> ids = new ArrayList<>();
		try {
			while (resultSet.next()) {
				ids.add(resultSet.getInt(1));
			}
		} finally {
			conn.close();
			stmt.close();
			// stmt2.close();
			resultSet.close();
		}

		return ids;
	}

	public void saveToCsv() throws SQLException, IOException, ParseException {
		Connection conn = establishConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT StudentData FROM testdb.students4");
		ResultSet rs = stmt.executeQuery();

		List<String> colNames = new ArrayList<>();
		List<String[]> colValues = new ArrayList<>();

		// to get colNames
		while (rs.next()) {
			String JsonStr = rs.getString("StudentData");
			JSONParser jsonParser = new JSONParser();
			Object obj = jsonParser.parse(JsonStr);
			JSONObject jsonObject = (JSONObject) obj;

			Set<String> keys = jsonObject.keySet();

			if (colNames.size() == 0) {
				colNames.addAll(keys);
			}

			else {
				for (Object s : keys) {
					if (!colNames.contains((String) s)) {
						colNames.add((String) s);
					}

				}
			}
		}
		rs.close();
		ResultSet rs2 = stmt.executeQuery();

		// to get colValues
		while (rs2.next()) {
			String JsonStr = rs2.getString("StudentData");
			JSONParser jsonParser = new JSONParser();
			Object obj = jsonParser.parse(JsonStr);
			JSONObject jsonObject = (JSONObject) obj;

			String[] dataPoint = new String[1000];
			int i = 0;
			for (String col : colNames) {
				if (jsonObject.get(col) != null) {
					dataPoint[i++] = (jsonObject.get(col).toString());
				} else {
					dataPoint[i++] = "null";
				}
			}
			colValues.add(dataPoint);

		}
		rs2.close();
		// to upload into csv file
		File file = new File("C:\\NarasimhaAsuri\\Workspace2\\PostRestApiAssignment\\src\\main\\java\\Students.csv");
		FileWriter outputfile = new FileWriter(file);
		BufferedWriter bufferedOutput = new BufferedWriter(outputfile);
		CSVWriter writer = new CSVWriter(bufferedOutput);

		String[] colNamesArr = new String[colNames.size()];
		colNamesArr = colNames.toArray(colNamesArr);

		writer.writeNext(colNamesArr);
		writer.writeAll(colValues);
		writer.close();
	}

	public void saveToCsv2() throws ParseException, SQLException, IOException {

		Connection conn = establishConnection();
		PreparedStatement stmt = conn.prepareStatement("SELECT StudentData FROM testdb.students4");
		ResultSet rs = stmt.executeQuery();

		JSONArray jsonArray = new JSONArray();
		while (rs.next()) {
			String JsonStr = rs.getString(1);
			JSONParser jsonParser = new JSONParser();
			Object obj = jsonParser.parse(JsonStr);
			jsonArray.put(obj);
		}
		rs.close();

		Set<String> colNames = new TreeSet<>();
		List<String[]> colValues = new ArrayList<>();

		// to get column Names and colValues
		for (Object jsonObject : jsonArray) {
			JSONObject jObj = (JSONObject) jsonObject;
			colNames.addAll(jObj.keySet());
		}
		for (Object jsonObject : jsonArray) {
			String[] dataPoint = new String[colNames.size()];
			int i = 0;
			for (Object col : colNames) {
				if (((JSONObject) jsonObject).get((String) col) != null) {
					dataPoint[i++] = (((JSONObject) jsonObject).get((String) col).toString());
				} else {
					dataPoint[i++] = "null";
				}
			}
			colValues.add(dataPoint);
		}

		// to upload into csv file
		File file = new File("C:\\NarasimhaAsuri\\Workspace2\\PostRestApiAssignment\\src\\main\\java\\Students.csv");
		FileWriter outputfile = new FileWriter(file);
		CSVWriter writer = new CSVWriter(outputfile);

		writer.writeNext(colNames.toArray(new String[] {}));
		writer.writeAll(colValues);
		writer.close();
	}

	public void save() throws IOException, InterruptedException, SQLException {
		
		//taking data from public API
		HttpClient client = HttpClient.newHttpClient();
		HttpRequest request = HttpRequest.newBuilder()
				.uri(URI.create("https://api2.binance.com/api/v3/ticker/24hr")).build();
		HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

		JSONArray jsonArray = new JSONArray(response.body());
		
		//Uploading to Database
		Connection conn = establishConnection();
		
		PreparedStatement stmt=conn.prepareStatement("INSERT INTO students4(StudentData) VALUE(?);");
		//System.out.println(jsonArray.get(0));
		for(Object jsonObject:jsonArray) {
			
			stmt.setString(1,jsonObject.toString());
			stmt.execute();
		}
		stmt.close();
	}
}
